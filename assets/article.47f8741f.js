export default'<div class=\'center\'>\n\n<p><img src="./vjsx.svg" alt="logo"></p>\n<h1 id="welcome-to-vanillajsx">Welcome to VanillaJSX!</h1>\n<h3 id="just-a-pure-javascript-with-jsx-syntax">Just a pure Javascript with JSX syntax.</h3>\n<p>Code with pure Javascript, components, and JSX!</p>\n</div>\n\n\n<div class=\'boxed\' style=\'color: #d20c38; font-size: larger; padding: 0.3rem; border-color: red;\'>\n\n<h3 id="⚠️caution⚠️">⚠️Caution⚠️</h3>\n<ul>\n<li>This is still in Draft phase!</li>\n</ul>\n</div>\n\n<hr>\n<h3 id="features">Features</h3>\n<ul>\n<li>Component Based Development</li>\n<li>JSX syntax</li>\n<li>NO complex framework</li>\n<li>NO virtual DOMs! Just use your familiar HTML DOMs!</li>\n<li>No Re-rendering by its framework, easier for developers to understand the behavior</li>\n<li>Less Learning Difficulty than React</li>\n<li>If you want to change DOM attributes or texts, JUST SET THEM BY YOURSELF!</li>\n<li>TS support</li>\n</ul>\n<h3 id="how-the-coding-works">How the Coding Works</h3>\n<p>When you code this:</p>\n<pre><code class="language-jsx"><span class="hljs-keyword">const</span> elem1 = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;elem1&#x27;</span>&gt;</span>hi!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n</code></pre>\n<p>This will work as:</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> elem1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)\nelem1.id = <span class="hljs-string">&#x27;elem1&#x27;</span>\nelem1.append(<span class="hljs-string">&#x27;hi!&#x27;</span>)\n</code></pre>\n<hr>\n<h2 id="installation">Installation</h2>\n<pre><code class="language-sh">npm i -D @vanillajsx/vjsx\n</code></pre>\n<h3 id="for-vitejs">for <a href="https://vitejs.dev/">vitejs</a></h3>\n<p>in your <code>vite.config.js</code>:</p>\n<pre><code class="language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">esbuild</span>: {\n    <span class="hljs-attr">jsxFactory</span>: <span class="hljs-string">&#x27;VJSX.r&#x27;</span>,\n    <span class="hljs-attr">jsxFragment</span>: <span class="hljs-string">&#x27;VJSX.Fragment&#x27;</span>,\n    <span class="hljs-attr">jsxInject</span>: <span class="hljs-string">`import VJSX from &#x27;@vanillajsx/vjsx&#x27;`</span>\n  },\n  <span class="hljs-comment">//... other settings</span>\n}\n</code></pre>\n<p>Then your JSX code would be interpreted as VanillaJSX! Have fun!</p>\n<hr>\n<h3 id="vanillajsx-provides">VanillaJSX provides:</h3>\n<ul>\n<li><code>useAttr</code> method:<pre><code class="language-ts"><span class="hljs-keyword">import</span> { useAttr } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vanillajsx/vjsx&#x27;</span>\nuseAttr(elem: Element, <span class="hljs-attr">propName</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">defaultValue</span>: <span class="hljs-built_in">any</span>)\n</code></pre>\n<ul>\n<li>This defines custom property setter/getter on your element.</li>\n<li>You are able to listen the value change using watch listener:<pre><code class="language-ts">elem.watch(propName: <span class="hljs-built_in">string</span>, <span class="hljs-function">(<span class="hljs-params">newValue</span>) =&gt;</span> <span class="hljs-built_in">void</span>)\n</code></pre>\n<ul>\n<li><code>watch</code> listener is similar to <code>addEventListener</code> </li>\n<li>The difference is that the listener function in <code>watch</code> recieves the new property value, not <code>Event</code> object.</li>\n</ul>\n</li>\n<li>The code example below shows the usage of <code>useAttr</code> and <code>watch</code>.</li>\n</ul>\n</li>\n</ul>\n<p>You can code using function component, or using <a href="https://developer.mozilla.org/ja/docs/Web/Web_Components/Using_custom_elements">CustomElement</a></p>\n<h3 id="code-example">Code Example</h3>\n<div id=\'example-codespace\'></div>\n\n<ul>\n<li>see how changing <code>self.progValue</code> affects other multiple values using <code>self.watch</code> method.</li>\n</ul>\n<h3 id="for-more-details">For more details</h3>\n<p>Please see the <a href="https://github.com/vanillajsx/VanillaJSX/tree/master/doc">document</a></p>\n<hr>\n<h3 id="tips">Tips</h3>\n<p>Since you load VanillaJSX in your javascript, <code>on</code> method, a shorthand of <code>addEventListener</code> is available on all the objects which provide <code>addEventListener</code> method (i.e. <code>EventTarget</code> objects).</p>\n<p>This can be simply implemented by the code below:</p>\n<pre><code class="language-js">EventTarget.prototype.on = EventTarget.prototype.addEventListener\n</code></pre>\n<hr>\n<h2 id="roadmap">Roadmap</h2>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> VanillaJSX processor<ul>\n<li>it dynamically appends components</li>\n</ul>\n</li>\n<li><input disabled="" type="checkbox"> Vite.js HMR Plugin</li>\n<li><input disabled="" type="checkbox"> SSG builder<ul>\n<li>it generates <ul>\n<li>pre-rendered HTML</li>\n<li>JS files which initializes the components</li>\n</ul>\n</li>\n<li><a href="https://vitejs.dev/guide/ssr.html#ssr-specific-plugin-logic">ViteJS SSG loader</a></li>\n</ul>\n</li>\n</ul>\n';

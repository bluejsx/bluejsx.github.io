var e,n,t,s=(e,n,t)=>{if(!n.has(e))throw TypeError("Cannot "+t)},i=(e,n,t)=>(s(e,n,"read from private field"),t?t.call(e):n.get(e)),r=(e,n,t,i)=>(s(e,n,"write to private field"),i?i.call(e,t):n.set(e,t),t);import{V as a,m as o,l}from"./vendor.0e39215f.js";!function(e=".",n="__import__"){try{self[n]=new Function("u","return import(u)")}catch(t){const s=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[n]=e=>new Promise(((t,r)=>{const a=new URL(e,s);if(self[n].moduleMap[a])return t(self[n].moduleMap[a]);const o=new Blob([`import * as m from '${a}';`,`${n}.moduleMap['${a}']=m;`],{type:"text/javascript"}),l=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(o),onerror(){r(new Error(`Failed to import: ${e}`)),i(l)},onload(){t(self[n].moduleMap[a]),i(l)}});document.head.appendChild(l)})),self[n].moduleMap={}}}("assets/");const c=[["View the Source Code of This Page","https://github.com/vanillajsx/VanillaJSX/tree/master/examples/example1"],["GitHub Repository","https://github.com/vanillajsx/VanillaJSX"],["Join Discussions","https://github.com/vanillajsx/VanillaJSX/discussions"]],d=()=>{let e=!1;const n=a.r("div",{id:"h-menu-button"},a.r("span",null),a.r("span",null)),t=a.r("div",{id:"backfield"}),s=a.r("div",{class:"menu_list_container hidden"},n,a.r("div",{class:"menu-list"},c.map((e=>{const n=a.r("p",null,e[0]);return n.onclick=()=>window.open(e[1]),n}))),t);return s.useAttr({open:{get:()=>e,set(n){e=n,n?s.classList.remove("hidden"):s.classList.add("hidden")}}}),t.onclick=()=>s.open=!1,n.onclick=()=>s.open=!s.open,s};const u=()=>a.r("header",null,a.r("div",{class:"_title_69m70_12"},"Vanilla.JSX"),a.r(d,null));const p="_main_8b2wh_1";class h extends HTMLElement{constructor(...s){super(...s),e.set(this,1),n.set(this,null),t.set(this,void 0),r(this,t,a.r("div",{part:"bar"}));this.attachShadow({mode:"closed"}).appendChild(i(this,t))}static get observedAttributes(){return["max","value"]}connectedCallback(){this.render()}attributeChangedCallback(t,s,a){switch(t){case"max":r(this,e,+a),this.render();break;case"value":r(this,n,Math.min(i(this,e),a)),this.render()}}render(){if(i(this,n)){this.classList.remove("indeterminate"),i(this,n)===i(this,e)&&this.classList.add("complete");const s=i(this,n)/i(this,e)*100;i(this,t).style.width=s+"%"}else i(this,t).style.width="",this.classList.remove("complete"),this.classList.add("indeterminate")}get value(){return i(this,n)}get max(){return i(this,e)}set value(e){this.setAttribute("value",e)}set max(e){this.setAttribute("max",e)}}e=new WeakMap,n=new WeakMap,t=new WeakMap,customElements.define("custom-progress",h);const m=({pr1:e=0,children:n=null})=>{const t=a.r(h,{min:"0",max:"100",value:e}),s=a.r("button",null,"click"),i=a.r("div",{class:"t3"},s,t,((n,t)=>{t.on("pr1change",(e=>n(e.detail.value))),n(e)})," %",n);return i.useAttr({pr1:{get:()=>e,set(n){e=n,i.dispatchEvent(new CustomEvent("pr1change",{detail:{value:n}}))}}}),i.on("pr1change",(e=>t.value=e.detail.value)),s.onclick=()=>{i.pr1<100?i.pr1+=10:i.pr1=0},i};o.setOptions({highlight:function(e,n){return l.highlightAuto(e,[n]).value}});const v=()=>{const e=a.r("div",{class:"container"},o("<div class='center'>\n\n# Welcome to VanillaJSX!\n\n### Just a pure Javascript with JSX syntax.\n\nCode with pure Javascript, components, and JSX!\n</div>\n\n\n<div class='boxed' style='color: #a01232; font-size: larger;'>\n\n### ⚠️Caution⚠️\n- This is still in Draft phase!\n\n</div>\n\n---\n\n### Features\n- Component Based Development!\n- JSX syntax!\n- NO complex framework!\n- NO virtual DOMs! Just use your familiar HTML DOMs!\n- No Re-rendering by its framework, easier for developers to understand the behavior\n- Less Learning Difficulty than React\n- Just use your JS skills!\n- If you want to change DOM attributes or texts, JUST SET THEM BY YOURSELF!\n- TS support\n\n\n\n### How the Coding Works\nWhen you code this:\n```jsx\nconst elem1 = <div id='elem1'>hi!</div>\n```\nThis will work as:\n```js\nconst elem1 = document.createElement('div')\nelem1.append('hi!')\nelem1.id = 'elem1'\n```\n\n---\n\n## Usage\n### Installation\n```sh\nnpm i @vanillajsx/vjsx\n```\n### for [vitejs](https://vitejs.dev/)\nin your `vite.config.js`:\n```js\nexport default {\n  esbuild: {\n    jsxFactory: 'VJSX.r',\n    jsxFragment: 'VJSX.Fragment',\n    jsxInject: `import VJSX from '@vanillajsx/vjsx'`\n  },\n  //... other settings\n}\n```\nThen your JSX code would be interpreted as VanillaJSX! Have fun!\n\n---\n\n### When you load VanillaJSX library,\n- `on` method, a shorthand of `addEventListener` \nis available on all the objects which provide 'addEventListener'.\n- `useAttr` method is defined on all HTML Elements\n  - `useAttr` method sets custom attribute properties on your element.\n  - This is a shorthand of [Object.defineProperties](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n  - this makes you able to define [Setter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set)/[Getters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get) on your elements.\n\nYou can code using function component, or using [CustomElement](https://developer.mozilla.org/ja/docs/Web/Web_Components/Using_custom_elements)\n\n#### Code Example\n\n```jsx\nimport { CustomProgress } from './CustomProgress'\n\n//takes in attributes as arguments (access to children elements via 'children' attribute)\nconst Example = ({pr1=0, children})=>{\n\n  //declare elements\n  const progress = <CustomProgress min='0' max='100' value={pr1}/>\n  const btn = <button>click</button>\n  const self = (\n    <div class='t3'>\n      {btn}\n      {progress} \n      {(set, elem)=>{\n        elem.on('pr1change',e=>set(e.detail.value))\n        set(pr1)\n      }} %\n      {children}\n    </div>\n  )\n  //------\n  \n  //define setters and getters\n  self.useAttr({\n    pr1: {\n      get(){\n        return pr1\n      },\n      set(v){\n        pr1 = v\n        self.dispatchEvent(\n          new CustomEvent(\"pr1change\", { \n            detail: {\n              value: v\n            }\n          })\n        )\n      }\n    }\n  })\n  //-------\n  \n  // functionalities\n  self.on('pr1change',e=> progress.value = e.detail.value)\n  btn.onclick = () =>{\n    /*\n      below just looks assigning a value to a property,\n      however this is running getter/setter method.\n      So when you change 'self.pr1' value, \n      'pr1change' event is dispatched to 'self' element.\n    */\n    if(self.pr1<100) self.pr1+=10\n    else self.pr1 = 0\n  }\n  //-------\n  \n  // return self element\n  return self\t\n}\n```\n\n### Result of the code above\n<div id='example-result-space' class='boxed'></div>\n\n- see how changing one value affects other multiple values using CustomEvents\n\n---\n\n## Roadmap\n\n- [x] VanillaJSX processor\n  - it dynamically appends components\n- [ ] make Typescript code suggestion work\n  - maybe making VSCode Extension might be a solution\n- [ ] Vite.js HMR Plugin\n- [ ] SSG builder\n  - it generates \n    - pre-rendered HTML\n    - JS files which initializes the components\n  - [ViteJS SSG loader](https://vitejs.dev/guide/ssr.html#ssr-specific-plugin-logic)\n\n").split("<hr>").map((e=>a.r("section",{innerHTML:e,class:"markdown-body"}))));e.querySelector("#example-result-space").appendChild(a.r(m,null));return a.r("div",{class:p},e)};document.querySelector("#app").appendChild(a.r("div",null,a.r(u,null),a.r(v,null)));

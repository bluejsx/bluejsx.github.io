export default"<div class='center'>\n\n![logo](./vjsx.svg)\n\n#  Welcome to VanillaJSX!\n\n### Just a pure Javascript with JSX syntax.\n\nCode with pure Javascript, components, and JSX!\n</div>\n\n\n<div class='boxed' style='color: #a01232; font-size: larger; padding: 0.3rem;'>\n\n### ⚠️Caution⚠️\n- This is still in Draft phase!\n\n</div>\n\n---\n\n### Features\n- Component Based Development!\n- JSX syntax!\n- NO complex framework!\n- NO virtual DOMs! Just use your familiar HTML DOMs!\n- No Re-rendering by its framework, easier for developers to understand the behavior\n- Less Learning Difficulty than React\n- Just use your JS skills!\n- If you want to change DOM attributes or texts, JUST SET THEM BY YOURSELF!\n- TS support\n\n\n\n### How the Coding Works\nWhen you code this:\n```jsx\nconst elem1 = <div id='elem1'>hi!</div>\n```\nThis will work as:\n```js\nconst elem1 = document.createElement('div')\nelem1.append('hi!')\nelem1.id = 'elem1'\n```\n\n---\n\n## Usage\n### Installation\n```sh\nnpm i @vanillajsx/vjsx\n```\n### for [vitejs](https://vitejs.dev/)\nin your `vite.config.js`:\n```js\nexport default {\n  esbuild: {\n    jsxFactory: 'VJSX.r',\n    jsxFragment: 'VJSX.Fragment',\n    jsxInject: `import VJSX from '@vanillajsx/vjsx'`\n  },\n  //... other settings\n}\n```\nThen your JSX code would be interpreted as VanillaJSX! Have fun!\n\n---\n\n\n### When you load VanillaJSX library,\n- `on` method, a shorthand of `addEventListener` \nis available on all the objects which provide 'addEventListener'.\n\n### VanillaJSX provides:\n- `useAttr` method:\n  ```ts\n  import { useAttr } from '@vanillajsx/vjsx'\n  useAttr(elem: Element, propName: string, defaultValue: any)\n  ```\n  - This sets custom property variable on your element.\n  - This makes you able to listen the value change using `watch` listener:\n    ```ts\n    elem.watch(propName: string, (newValue) => void)\n    ```\n    - `watch` listener is similar to `addEventListener` \n    - The difference is that the listener function in `watch` recieves the new property value, not `Event` object.\n  - The code example below shows the usage of `useAttr` and `watch`.\n\nYou can code using function component, or using [CustomElement](https://developer.mozilla.org/ja/docs/Web/Web_Components/Using_custom_elements)\n\n### Code Example\n```jsx\nimport { useAttr } from '@vanillajsx/vjsx'\nimport { CustomProgress } from './CustomProgress'\n\n//takes in attributes as arguments (access to children elements via 'children' attribute)\nconst Example = ({progValue=0, children})=>{\n\n  //declare elements\n  const progress = <CustomProgress max='100' value={progValue}/>\n  const btn = <button>click</button>\n  const self = (\n    <div class='t3'>\n      {btn}\n      {progress} \n      {(set, elem)=>elem.watch('progValue',v=>set(v))} %\n      {children}\n    </div>\n  )\n\n  /*\n  below defines a property named 'progValue',\n  and when 'progValue' changes, \n  all registered listeners will be executed.\n  */\n  useAttr(self, 'progValue', progValue)\n\n  // functionalities\n  //when `self.progValue` changed, set `progress.value` to `self.progValue`\n  self.watch('progValue',v=> progress.value = v)\n\n  btn.onclick = () =>{\n    /*\n      below just looks assigning a value to a property,\n      however this is running getter/setter method,\n      which executes all listener functions registered via `watch` method.\n    */\n    if(self.progValue<100) self.progValue+=10\n    else self.progValue = 0\n  }\n\n  // return self element\n  return self\t\n}\n```\n\n### Result of the code above\n<div id='example-result-space' class='boxed'></div>\n\n- see how changing `self.progValue` affects other multiple values using `self.watch` method.\n\n---\n\n## Roadmap\n\n- [x] VanillaJSX processor\n  - it dynamically appends components\n- [ ] make Typescript code suggestion work\n  - maybe making VSCode Extension might be a solution\n- [ ] Vite.js HMR Plugin\n- [ ] SSG builder\n  - it generates \n    - pre-rendered HTML\n    - JS files which initializes the components\n  - [ViteJS SSG loader](https://vitejs.dev/guide/ssr.html#ssr-specific-plugin-logic)\n\n";

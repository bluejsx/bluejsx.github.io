export default'<div class=\'center\'>\n\n<div id=\'logo_container\'></div>\n\n<h1 id="welcome-to-bluejsx">Welcome to BlueJSX!</h1>\n<h3 id="just-a-pure-javascript-with-jsx-syntax">Just a pure Javascript with JSX syntax.</h3>\n<p>Code with pure Javascript, components, and JSX!</p>\n</div>\n\n<hr>\n<h3 id="features">Features</h3>\n<ul>\n<li>Component Based Development</li>\n<li>JSX syntax</li>\n<li>NO complex framework</li>\n<li>NO virtual DOMs! Just use your familiar HTML DOMs!</li>\n<li>No Re-rendering by its framework, easier for developers to understand the behavior</li>\n<li>Less Learning Difficulty than React</li>\n<li>If you want to change DOM attributes or texts, JUST SET THEM BY YOURSELF!</li>\n<li>TS support</li>\n</ul>\n<h3 id="how-the-coding-works">How the Coding Works</h3>\n<p>When you code this:</p>\n<pre><code class="language-jsx"><span class="hljs-keyword">const</span> elem1 = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;elem1&#x27;</span>&gt;</span>hi!<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n</code></pre>\n<p>This will work as:</p>\n<pre><code class="language-js"><span class="hljs-keyword">const</span> elem1 = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>)\nelem1.id = <span class="hljs-string">&#x27;elem1&#x27;</span>\nelem1.append(<span class="hljs-string">&#x27;hi!&#x27;</span>)\n</code></pre>\n<hr>\n<h2 id="installation">Installation</h2>\n<pre><code class="language-sh">npm i -D bluejsx\n</code></pre>\n<h3 id="for-vitejs">for <a href="https://vitejs.dev/">vitejs</a></h3>\n<p>in your <code>vite.config.js</code>:</p>\n<pre><code class="language-js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> {\n  <span class="hljs-attr">esbuild</span>: {\n    <span class="hljs-attr">jsxFactory</span>: <span class="hljs-string">&#x27;Blue.r&#x27;</span>,\n    <span class="hljs-attr">jsxFragment</span>: <span class="hljs-string">&#x27;Blue.Fragment&#x27;</span>,\n    <span class="hljs-attr">jsxInject</span>: <span class="hljs-string">`import Blue from &#x27;bluejsx&#x27;`</span>\n  },\n  <span class="hljs-comment">//... other settings</span>\n}\n</code></pre>\n<p>in your <code>tsconfig.json</code>/<code>jsconfig.json</code></p>\n<pre><code class="language-json">{\n  <span class="hljs-comment">/*\n  ... your settings ...\n  You would need to state &quot;jsx&quot; option of your choice\n  */</span>\n  <span class="hljs-attr">&quot;jsxFactory&quot;</span>: <span class="hljs-string">&quot;Blue.r&quot;</span>,\n  <span class="hljs-attr">&quot;jsxFragmentFactory&quot;</span>: <span class="hljs-string">&quot;Blue.Fragment&quot;</span>\n}\n</code></pre>\n<p>Then your JSX code would be interpreted as VanillaJSX! Have fun!</p>\n<hr>\n<h3 id="code-example">Code Example</h3>\n<div id=\'example-codespace\'></div>\n\n<h3 id="for-more-details">For more details</h3>\n<p>Please see the <a href="https://github.com/bluejsx/BlueJSX/tree/master/doc">document</a></p>\n<hr>\n<h3 id="tips">Tips</h3>\n<p>Since you load VanillaJSX in your javascript, <code>on</code> method, a shorthand of <code>addEventListener</code> is available on all the objects which provide <code>addEventListener</code> method (i.e. <code>EventTarget</code> objects).</p>\n<p>This can be simply implemented by the code below:</p>\n<pre><code class="language-js">EventTarget.prototype.on = EventTarget.prototype.addEventListener\n</code></pre>\n<hr>\n<h2 id="roadmap">Roadmap</h2>\n<ul>\n<li><input checked="" disabled="" type="checkbox"> BlueJSX processor<ul>\n<li>it dynamically appends components</li>\n</ul>\n</li>\n<li><input disabled="" type="checkbox"> Vite.js HMR Plugin</li>\n<li><input disabled="" type="checkbox"> SSG builder<ul>\n<li>it generates <ul>\n<li>pre-rendered HTML</li>\n<li>JS files which initializes the components</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n';
